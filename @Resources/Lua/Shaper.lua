-- Author: Blu (/u/IamLUG)
-- 
-- How to use?
--   Script Measure:
--     IncFile=
--     Number=
--     Template=
-- Use %% to substitute it as the iteration number (which is specified by the Number option)
--   For example, if you specify 10, it will create 10 shapes and replace the first shape's %%
--   with 1, the second shape's %% with 2, etc...
-- Wrap any formulas you want to parse in {} that otherwise RM would treat as a string
--   For example, [Measure{%%+1}] will have this script parse it for you

function Initialize()
    -- Make sure it runs once only (Uses LuaRefresher)
    if SKIN:GetMeasure("LuaRefresher"):GetNumberOption("Refreshed") == 1 then return end

    if IsCache("LineCount") and IsCache("LineGap") and IsCache("LineWidth") and IsCache("LineHeight") then return end

    local number = SELF:GetNumberOption("Number")
    local template = SELF:GetOption("Template")

	local file = io.open(SKIN:MakePathAbsolute(SELF:GetOption("IncFile")), "w")

	local t = { "; Auto-generated by " .. SELF:GetName() }

    table.insert(t, "\n[" .. SELF:GetOption("SectionName") .. "]")

    for i=1, number do
        local shapeName = "Shape" .. i

        if i == 1 then shapeName = "Shape" end

		table.insert(t, shapeName .. "=" .. ParseFormula(DoSub(template, i)))
    end

    file:write(table.concat(t, "\n"))
	file:close()
end

function DoSub(str, i)
    return str:gsub("%%%%", i)
end

function ParseFormula(str)
    return str:gsub("{.-}", function(f) return SKIN:ParseFormula("(" .. f:sub(2,-2) .. ")") end)
end

-- Check variable prev (Custom added)
function IsCache(str) 
    if SKIN:GetVariable(str) == SKIN:GetVariable("Prev" .. str) then
        return true
    else 
        SKIN:Bang("!WriteKeyValue", "Variables", "Prev" .. str, SKIN:GetVariable(str), "#@#Internal/Previous.inc")
        return false
    end
end
